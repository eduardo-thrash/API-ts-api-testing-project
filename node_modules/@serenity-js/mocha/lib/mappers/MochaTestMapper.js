"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MochaTestMapper = void 0;
const io_1 = require("@serenity-js/core/lib/io");
const model_1 = require("@serenity-js/core/lib/model");
/**
 * @package
 */
class MochaTestMapper {
    constructor(cwd) {
        this.cwd = cwd;
    }
    detailsOf(test) {
        function fileOf(t) {
            switch (true) {
                case !!t.ctx && !!t.ctx.currentTest && !!t.ctx.currentTest.file:
                    return t.ctx.currentTest.file;
                case !!t.file:
                    return t.file;
                case !!t.parent:
                    return fileOf(t.parent);
                default:
                    throw new Error(`Couldn't determine path of ${t}`);
            }
        }
        const path = new io_1.Path(fileOf(test));
        const scenarioName = this.nameOf(test);
        const title = this.fullNameOf(test);
        const featureName = scenarioName
            ? this.featureNameFor(test)
            : this.cwd.relative(path).value;
        return new model_1.ScenarioDetails(new model_1.Name(scenarioName || title), new model_1.Category(featureName), new io_1.FileSystemLocation(path));
    }
    featureNameFor(scenario) {
        const parentTitle = scenario?.parent?.title;
        return parentTitle !== undefined && parentTitle.trim() !== ''
            ? this.featureNameFor(scenario.parent)
            : scenario.title;
    }
    fullNameOf(scenario) {
        return scenario.parent
            ? `${this.fullNameOf(scenario.parent)} ${scenario.title}`.trim()
            : scenario.title;
    }
    nameOf(scenario) {
        return this.fullNameOf(scenario)
            .slice(this.featureNameFor(scenario).length)
            .trim();
    }
}
exports.MochaTestMapper = MochaTestMapper;
//# sourceMappingURL=MochaTestMapper.js.map